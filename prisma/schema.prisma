generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model bank {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  status      String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model bill {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id  String    @db.Uuid
  bill_type    String    @db.VarChar(255)
  bill_amount  Int
  due_date     DateTime? @db.Timestamp(6)
  payment_date DateTime? @db.Timestamp(6)
  status       String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  customer     customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model customer {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String        @db.Uuid
  account_number     String        @db.VarChar(255)
  account_type       String        @db.VarChar(255)
  balance            Int
  credit_card_status String        @db.VarChar(255)
  credit_card_limit  Int?
  created_at         DateTime      @default(now()) @db.Timestamp(6)
  updated_at         DateTime      @default(now()) @db.Timestamp(6)
  bill               bill[]
  user               user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transaction        transaction[]
}

model employee {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @db.Uuid
  employee_id     String    @db.VarChar(255)
  position        String    @db.VarChar(255)
  date_hired      DateTime? @db.Timestamp(6)
  date_terminated DateTime? @db.Timestamp(6)
  status          String    @db.VarChar(255)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  user            user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model transaction {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id             String    @db.Uuid
  transaction_type        String    @db.VarChar(255)
  transaction_amount      Int
  transaction_date        DateTime? @db.Timestamp(6)
  transaction_status      String    @db.VarChar(255)
  transaction_description String?   @db.VarChar(255)
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  updated_at              DateTime  @default(now()) @db.Timestamp(6)
  customer                customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  bank        bank[]
  customer    customer[]
  employee    employee[]
}
